<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:p="http://xmlns.jcp.org/jsf/passthrough">


<ui:composition template="/template/layoutUser.xhtml">
	<f:metadata>
		<f:viewParam name="id" value="#{editEventController.editEventId}" />
		<f:event type="preRenderView"
			listener="#{editEventController.loadEvent}" />
	</f:metadata>

	<ui:define name="head">
		<h:outputStylesheet name="createevent.css" library="css" />
		<h:outputStylesheet name="calenderview.css" library="css" />
		<h:outputStylesheet name="map.css" library="css" />
		<h:outputScript name="map.js" library="js" />
		<h:outputScript name="prototype.js" library="js" />
		<h:outputScript name="calenderview.js" library="js" />

		<h:outputScript>
			var myCal;
			var hour = 0;
			var minute = 0;
		
			function setupCalendars() {
        		// Embedded Calendar
       			myCal = Calendar.setup({
           	 		parentElement: 'embeddedCalendar'
          		});
        	
        		var prevDate = document.getElementById('unixtime').value;
        		console.log('prevDate',prevDate);
        		if(prevDate != 0){
        			var newDate = new Date(prevDate * 1000);
        			console.log('newdate', newDate);
        			myCal.setDate(newDate);
        			var hourInput = document.getElementById('hourinput');
        			var hourInput = document.getElementById('minuteinput');
        			hourinput.value = newDate.getHours();
        			minuteinput.value = newDate.getMinutes();        	
        		}
      		}      
		
			function calculateUnixTime() {							
				var date = new Date(myCal.date.getTime());
				date.setHours(hour);
				date.setMinutes(minute);
				date.setSeconds(0);
				date.setMilliseconds(0);
				
				utcSeconds = date.getTime() / 1000;			
				document.getElementById('unixtime').value = utcSeconds;			
			}
		
			function onHourChanged(value) {
				hour = parseInt(value);
				calculateUnixTime();
			}
		
			function onMinuteChanged(value) {
	 			minute = parseInt(value);
	 			calculateUnixTime();
			}
		
      		Event.observe(window, 'load', function() { 
      			setupCalendars(); 
      		});		
		</h:outputScript>
		
		<h:outputScript>
			setLocation(#{editEventController.event.latitude}, #{editEventController.event.longitude});	
			setAllowEdit(true);
			setAllowGeoLocation(false);
		</h:outputScript>
		
		<script
			src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDqA3iH8WgQpzZVcfSh_cqy1ZJL2GKj8QY&amp;signed_in=true&amp;callback=initMap&amp;libraries=places"
			async="async" defer="defer">
			
		</script>
	</ui:define>

	<ui:define name="content">
		<h:form id="createevent" prependId="false" class="content-block">
			<h3>#{editEventController.editEventId != -1 ? 'Edit Event' : 'Create Event'}</h3>
			
			<h:commandLink onclick="if (!confirm('Are you sure you want to cancel this event?')) return false"
				class="icon-link inline createbutton"
				rendered="#{editEventController.editEventId != -1}"
				action="#{editEventController.cancelEvent}" 
				immediate="true">
				<i class="material-icons">clear</i>
				<span>Cancel Event</span>
			</h:commandLink>

			<br />
			<br />
			<br/>
			<br/>
			<label>Title:</label>
			<br />
			<h:inputText id="event_title" value="#{editEventController.event.title}" required="true" requiredMessage="Enter title"></h:inputText>
			<h:message class="error-message" for="event_title" />
			<br />
			<br />
			<label>Description:</label>
			<br />
			<h:inputTextarea id="event_description" rows="4" cols="40"
				value="#{editEventController.event.description}"
				required="true" requiredMessage="Enter description">
			</h:inputTextarea>
			<h:message class="error-message" for="event_description" />

			<div class="calendarbox">
				<div id="embeddedCalendar" class="calendar"></div>
				
				<div class="hour">
					<label id="hourlabel">Hour</label><br />
					<h:inputText p:type="number" p:min="0" p:max="23" id="hourinput" onchange="onHourChanged(this.value)"
						required="true" requiredMessage="Enter hour." style="width: 40px;"></h:inputText>
						
					<h:message class="error-message" for="hourinput" />
				</div>
													
				<div class="minute">
					<label id="minutelabel">Minute</label> <br />
					<h:inputText id="minuteinput"
						onchange="onMinuteChanged(this.value)" p:type="number" p:min="0" p:max="59"   required="true"
						requiredMessage="Enter minute." style="width: 40px;"></h:inputText>
						<h:message class="error-message" for="minuteinput" />
				</div>
				<h:inputHidden id="unixtime"
					value="#{editEventController.event.date}"></h:inputHidden>

			</div>

			<div class="clear" />

			<h4>Location</h4>
			<input id="pac-input" class="controls" type="text" placeholder="Search"></input>
			<div id="map"></div>

			<h:inputHidden id="lat"
				value="#{editEventController.event.latitude}" />
			<h:inputHidden id="lng"
				value="#{editEventController.event.longitude}" />

	

			<h:commandLink class="icon-link inline createbutton"
				action="#{editEventController.createEvent}"
				rendered="#{editEventController.editEventId == -1}">
				<i class="material-icons">save</i>
				<span>Create</span>
			</h:commandLink>
			<h:commandLink class="icon-link inline createbutton"
				action="#{editEventController.editEvent}"
				rendered="#{editEventController.editEventId != -1}">
				<i class="material-icons">save</i>
				<span>Save</span>
			</h:commandLink>
			<h:link class="icon-link inline cancelbutton">
				<i class="material-icons">cancel</i>
				<span>Cancel</span>
			</h:link>
			
		 </h:form>
	</ui:define>
</ui:composition>
</html>
